{"version":3,"sources":["components/Logo/homer.png","components/Logo/Logo.js","components/ImageLinkForm/ImageLinkForm.js","components/FaceRecognition/FaceRecognition.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Logo","className","options","max","style","height","width","src","homer","alt","ImageLinkForm","onInputChange","onButtonSubmit","type","placeholder","onChange","onClick","FaceRecognition","imageURL","box","id","top","topRow","right","rightCol","bottom","bottomRow","left","leftCol","app","Clarifai","App","apiKey","calculateFaceLocation","data","clarifaiFace","outputs","regions","region_info","bounding_box","image","document","getElementById","Number","left_col","top_row","right_col","bottom_row","displayfaceBox","setState","event","input","target","value","state","models","predict","FACE_DETECT_MODEL","then","response","console","log","catch","err","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"kGAAAA,EAAOC,QAAU,IAA0B,mC,0UCgB5BC,EAVF,WACT,OACI,yBAAKC,UAAU,QACX,kBAAC,IAAD,CAAMA,UAAU,OAAOC,QAAS,CAAEC,IAAM,IAAMC,MAAO,CAAEC,OAAQ,IAAKC,MAAO,MACvE,yBAAKL,UAAU,cAAa,yBAAKM,IAAKC,IAAOC,IAAI,SAAjD,QCMDC,G,MAZO,SAAC,GAAqC,IAApCC,EAAmC,EAAnCA,cAAeC,EAAoB,EAApBA,eACnC,OACI,yBAAKX,UAAU,iBACX,2BAAI,2CACJ,yBAAKA,UAAU,uBACX,2BAAOA,UAAU,eAAeY,KAAK,OAAOC,YAAY,wBAAwBC,SAAUJ,IAC1F,4BAAQV,UAAU,eAAee,QAASJ,GAA1C,cCKDK,G,MAXS,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,SAAUC,EAAS,EAATA,IAChC,OACI,yBAAKlB,UAAU,mBACX,yBAAKA,UAAU,yBACX,yBAAKmB,GAAG,aAAab,IAAKW,EAAUT,IAAI,GAAGH,MAAM,QAAQD,OAAO,SAChE,yBAAKJ,UAAU,eAAeG,MAAO,CAACiB,IAAKF,EAAIG,OAAQC,MAAOJ,EAAIK,SAAUC,OAAQN,EAAIO,UAAWC,KAAMR,EAAIS,eCAvHC,EAAM,IAAIC,IAASC,IAAI,CAC3BC,OAAQ,qCA0DKD,E,YAtDb,aAAe,IAAD,8BACZ,+CAQFE,sBAAwB,SAACC,GACvB,IAAMC,EAAeD,EAAKE,QAAQ,GAAGF,KAAKG,QAAQ,GAAGC,YAAYC,aAC3DC,EAAQC,SAASC,eAAe,cAChCpC,EAAQqC,OAAOH,EAAMlC,OACrBD,EAASsC,OAAOH,EAAMnC,QAC5B,MAAO,CACLuB,QAASO,EAAaS,SAAWtC,EACjCgB,OAAQa,EAAaU,QAAUxC,EAC/BmB,SAAUlB,EAAS6B,EAAaW,UAAYxC,EAC5CoB,UAAWrB,EAAU8B,EAAaY,WAAa1C,IAlBrC,EAsBd2C,eAAgB,SAAC7B,GACf,EAAK8B,SAAS,CAAC9B,IAAKA,KAvBR,EA0BdR,cAAgB,SAACuC,GACf,EAAKD,SAAS,CAACE,MAAOD,EAAME,OAAOC,SA3BvB,EA8BdzC,eAAiB,WACf,EAAKqC,SAAS,CAAC/B,SAAU,EAAKoC,MAAMH,QACpCtB,EAAI0B,OACDC,QACC1B,IAAS2B,kBACT,EAAKH,MAAMH,OACVO,MAAK,SAAAC,GACJC,QAAQC,IAAIF,EAASvB,QAAQ,GAAGF,KAAKG,QAAQ,GAAGC,YAAYC,cAC5D,EAAKS,eAAe,EAAKf,sBAAsB0B,OAEhDG,OAAM,SAAAC,GAAG,OAAIH,QAAQC,IAAIE,OAtC9B,EAAKT,MAAQ,CACXH,MAAO,GACPjC,SAAU,GACVC,IAAK,IALK,E,sEA4CZ,OACA,yBAAKlB,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAeU,cAAeqD,KAAKrD,cAAeC,eAAgBoD,KAAKpD,iBACvE,kBAAC,EAAD,CAAiBO,IAAK6C,KAAKV,MAAMnC,IAAKD,SAAU8C,KAAKV,MAAMpC,gB,GAjD/C+C,aCDEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAS/B,SAASC,eAAe,SD6H3C,kBAAmB+B,WACrBA,UAAUC,cAAcC,MACrBjB,MAAK,SAAAkB,GACJA,EAAaC,gBAEdf,OAAM,SAAAgB,GACLlB,QAAQkB,MAAMA,EAAMC,c","file":"static/js/main.61aa878b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/homer.4c7c8883.png\";","import React from 'react';\nimport './Logo.css';\nimport homer from './homer.png';\nimport Tilt from 'react-tilt';\n\n\nconst Logo = () => {\n    return (\n        <div className='logo'>\n            <Tilt className=\"Tilt\" options={{ max : 45 }} style={{ height: 250, width: 250 }} >\n                <div className=\"Tilt-inner\"><img src={homer} alt=\"logo\"/> </div>\n            </Tilt>     \n        </div>\n    )\n}\n\nexport default Logo","import React from 'react';\nimport './ImageLinkForm.css';\n\n\nconst ImageLinkForm = ({onInputChange, onButtonSubmit}) => {\n    return (\n        <div className='ImageLinkForm'>\n            <p>{'Load a picture a see it detect the face'}</p>\n            <div className='ImageLinkForm-inner'>\n                <input className=\"form-control\" type=\"text\" placeholder=\"https://link.whatever\" onChange={onInputChange}/>\n                <button className=\"btn btn-info\" onClick={onButtonSubmit} >Detect</button>\n            </div>\n        </div>\n    )\n}\n\nexport default ImageLinkForm","import React from 'react';\nimport './FaceRecognition.css';\n\n\nconst FaceRecognition = ({imageURL, box}) => {\n    return (\n        <div className='FaceRecognition'>\n            <div className='FaceRecognition-inner'>\n                <img id='inputImage' src={imageURL} alt=\"\" width='500px' height='auto' />\n                <div className='bounding-box' style={{top: box.topRow, right: box.rightCol, bottom: box.bottomRow, left: box.leftCol}}></div>\n            </div>\n        </div>\n    )\n}\n\nexport default FaceRecognition","import React, {Component} from 'react';\nimport Clarifai from 'clarifai';\n\nimport './App.css';\n\nimport Logo from './components/Logo/Logo';\nimport ImageLinkForm from './components/ImageLinkForm/ImageLinkForm';\nimport FaceRecognition from './components/FaceRecognition/FaceRecognition';\n\nconst app = new Clarifai.App({\n  apiKey: '3ec3e93897234e4ba6197fb9f30a428f'\n });\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      input: '',\n      imageURL: '',\n      box: ''\n    }\n  }\n\n  calculateFaceLocation = (data) => {\n    const clarifaiFace = data.outputs[0].data.regions[0].region_info.bounding_box;\n    const image = document.getElementById('inputImage');\n    const width = Number(image.width);\n    const height = Number(image.height);\n    return {\n      leftCol: clarifaiFace.left_col * width,\n      topRow: clarifaiFace.top_row * height,\n      rightCol: width - (clarifaiFace.right_col * width),\n      bottomRow: height - (clarifaiFace.bottom_row * height)\n    }\n  }\n\n  displayfaceBox= (box) => {\n    this.setState({box: box})\n  }\n\n  onInputChange = (event) => {\n    this.setState({input: event.target.value});\n  }\n\n  onButtonSubmit = () => {\n    this.setState({imageURL: this.state.input})\n    app.models\n      .predict(\n        Clarifai.FACE_DETECT_MODEL,\n        this.state.input)\n        .then(response => {\n          console.log(response.outputs[0].data.regions[0].region_info.bounding_box)\n          this.displayfaceBox(this.calculateFaceLocation(response));\n        })\n        .catch(err => console.log(err))\n  }\n\n  render() {\n    return (\n    <div className=\"App\">\n      <Logo />\n      <ImageLinkForm onInputChange={this.onInputChange} onButtonSubmit={this.onButtonSubmit} />\n      <FaceRecognition box={this.state.box} imageURL={this.state.imageURL} />\n    </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}